#!/bin/bash
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Noel T. Negusse
# install.sh
# A simple script to setup a personalized UN*X enviornment in order to make migrating
# and updating shells more portable
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#Variables++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#CHANGE VARIABLES ACCORDINGLY

dir="$( cd "$( dirname "${BASH_SOURCE[0]}"  )" && pwd  )"   # dotfiles directory
olddir=$HOME/.old_dotfiles								  	# old dotfiles backup directory
files=$dir/*												# retrieving given dotfiles

# Do Work+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# A. Create backup dotfiles folder in homedir
# B. ~ dotsfiles -> $olddir NEXT create soft links to dotfiles in $HOME

#A.
echo "Creating $olddir for backup of any existing dotfiles in home directory"
mkdir -p $olddir
echo "...done
"

echo "Changing to the $dir directory"
cd $dir
echo "...done
"

tmux=false
vim=false

#B.
for file in $files; do
	finame=${file##*/}
	dotfi=$HOME/.$finame
	if [ "$finame" = "README.md" ] || [ "$finame" = "install" ] || [ "$finame" = "app_imports" ] \
		|| [ "$finame" = "var" ] || [ "$finame" = "share" ] || [ "$finame" = "lib" ] \
		|| [ "$finame" = "include" ] || [ "$finame" = "opt" ] || [ "$finame" = "etc" ] \
		|| [ "$finame" = "Cellar" ] || [ "$finame" = "bin" ] || [ "$finame" = "Bin" ]; then
		continue
	fi
	echo "############################### NEXT FILE ###############################"

	# checks if to-be-backed-up file exists and is not a symlink
	if [ -e $dotfi ] && [ ! \( -L $dotfi \) ]; then
		echo "Attempting to backup $dotfi to $olddir ..."
		rm -rf $olddir/$finame
		mv $dotfi $olddir/$finame
		echo "...done"
	else
		cp -rf $file $olddir 2>/dev/null || :
		echo "$dotfi either doesn't exist or is a symlink
		"
	fi

	# checks if to-be-linked file exists
	if [ -e $dir/$finame ]; then
		echo "Creating symlink of $finame in your HOME directory as \".$finame\"
		"
		rm -rf $dotfi
		ln -sf $file $dotfi

		# Checks for vimrc to source for eclipse's vrapper plugin
		if [ "$finame" = "vimrc" ]; then
			echo "*Also creating symlink of $finame in your HOME directory as \".vrapperrc\"
			"
			ln -sf $file $HOME/.vrapperrc
		fi
	fi

	# checks if a vim file and if plugins can be installed
	if [ "$finame" = "vim" ] && [ -a $file/bundle ]; then
		vim=true
	fi

	# Applies tmux config if added
	if [ "$finame" = "tmux" ]; then
		if [ -a /usr/bin/tmux ] || [ -a /usr/local/bin/tmux ]; then
			tmux=true
		fi
	fi

	# Applies xmodmap changes if added
	if [ "$finame" = "Xmodmap" ]; then
		xmodmap ~/.Xmodmap
	fi

	# Applies Xresources changes to Xorg
	if [ "$finame" = "Xresources" ]; then
		xrdb -merge -I$HOME ~/.Xresources
	fi
done

echo "############################### NEXT FILE ###############################"
if [ -e ~/Bin ] && [ ! -L ~/Bin ]; then
	echo "Merging ~/Bin and $dir/Bin folders"
	cp -r $dir/Bin/* ~/Bin/ 2> /dev/null
	rm -rf $dir/Bin/ 2> /dev/null
	mv ~/Bin $dir
	echo "...done"
fi

if [ -e ~/Bin ] && [ -L ~/Bin ]; then
	rm ~/Bin 2> /dev/null
fi

echo "Creating symlink of Bin in your HOME directory as \"Bin\""
ln -sf $dir/Bin ~/Bin

mkdir -p ~/.trash

# Sourcing and Installing
git submodule update --init --recursive

if [ "$tmux" = true ]; then
	echo "Applying tmux config:"
	tmux source-file ~/.tmux.conf
fi

if [ "$vim" = true ]; then
	echo "Updating and installing all vim plugins and adding 'backups' folder"
	vim +PluginInstall +qall
	mkdir -p vim/backups
fi

sleep 6

source ~/.bash_profile
