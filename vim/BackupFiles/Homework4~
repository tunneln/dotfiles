Noel Negusse
ntn443

#1.

One advantage of using processes for concurrency is fault tolerance. Using processes the programmer is forced to deal with communication via messages instead of more direct communication methods used in threads. Also data is not shared so there is no risk with  data becoming corrupted. Processes have disadvantages in that processes take very long to spawn compared to threads, also, much like a double edged sword, threads allow the sharing of memory which can make things a lot more streamlined.

#2. 

Generic spin lock is not fair because taks are contending for the same lock and many of these tasks are perforing atomic level ops like test_and_set. Ticket lock is fair because the idea is to split the lock value into two pieces - Next and Owner - and compare and swap to get the current lock values in order to incremement to next. This allways a "fair" amount of work per task.

#3.

It is important to note that wait() doesn't return until caller is done waiting, in on other words, if wait() were synchronized then the caller would continue to hold the lock on the object. When wait is placed outside a synchronized block it is primarily done to avoid nested monitor lockout, so another thread can actually call unlock() when no thread is executing inside the synchronized block in lock() method. 
