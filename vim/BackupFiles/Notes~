LOTS OF JAVA OOP STUFF

EXTENDING ABSTRACT CLASS OR IMPLEMENTING AN INTERFACE
will prevent the use of any unique methods within the derived class.
This is beneficial when trying to mantain standards between similar objects/classes
e.g. List<Integer> a = new ArrayList<Integer>(); can garuntee the transition to say List<Integer> a = new LinkedList<>();

Note: Interfaces are more based on the idea of connecting objects that allign with the basic functionality declared by 
an interface. Hence the term "Interface", meaning to define basic interfaces of objects that meet the requirements of the Interface.

---------Abstract vs Interface---------

ABSTRACT CLASS
+ Abstract classes have more flexibility in that they may contain state (data members) and methods(implmentations or definitions)
+ ONLY Abstract methods in the abstract class [note: both or none can exist] must be defined and have their implementations in the derived classes that call on them.
+ ABSTRACT CLASSES MAY NOT BE MULTI-INHERITED

INTERFACE
+ Interfaces are all declarations to methods that MUST be implemented in the implemented class (or derived classes of that implemented class)
  Also, Interfaces never carry definitions themselves.
+ INTERFACES MAY BE MULTI-INHERITED (why List is an interface)



+++++++++++++++++++++++++++++JAVA VS C++ OOP+++++++++++++++++++++++++++++

Java
+ All classes inherit from the Object class (directly or indirectly [happen automatically if not specified])
+ Meaning that there is ALWAYS a single inheritance tree of classes in java and the Object class is the root
C++
+ C++ has a forest of classes, when creaing a class that doesn't inherit from anything, ew create a new tree in the forest
---------
Java
+ Grandparent classes are not directly accessible, they must be accessed through a parent class
C++
+ C++ can just call Grandparent::do_something()
---------
Java
+ Protected can also overarch into being accessible to classes of the same 'package' in java unlike C++ which is derived class exclusive
---------
Java
+ Java can only call extends and doesn't specify inheritance like C++
C++
+ C++ can provide an inheritance specifier likepublic, protected, or private so you can change the protection level of members of the parent class
---------
Java
+ Methods are virtual by default
C++
+ You have to explicitily use the virtual keyword
---------
THE OBVIOUS DIFFERENCES BETWEEN JAVA'S ABSTRACT/INTERFACES TO C++ PURE VIRTUAL FUNCTIONS(ABSTRACT)
---------
Java
+ Does not support multiple inheritance, A class cannot inherit from more than one class. BUT CAN implement multiple interfaces.
C++
+ Supports multiple inheritance of a single class
---------
Java
+ Must use super(...) to call parameterized constructor of parent class
C++
+ Must use Initializer list to call paramterized constructor from parent clas

INITIALIZER LIST EXAMPLE--> func(int i = 0, int j = 0): x(i), y(j){} 		OR 		func(int i = 0, int j = 0){ x = i; y = j;}		OR 		B::B(int x):A(x){}
Must also be used for const (non-static) variables, reference members (&t), member objects (i.e. B(int x):a(x){} [A a; being declared) 
NOTE: Default constructor of parent class is automatically called like Java
