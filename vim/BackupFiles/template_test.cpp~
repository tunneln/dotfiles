#include <iostream>

using std::cout;
using std::endl;

template <class T>
class base{
	protected:
		T foo;
	public:
		base(): foo(0){}
		void print(){ cout << "printing Base class member function with type and value " 
			<< foo << endl; }
		virtual T add(T a){ foo+= a; return foo; }
		base<T> operator+(T a){
			this->foo+=a;
			return *this;	
		}
};

template <class T>
class derived: public base<T>{
	public:
		using base<T>::foo;
		void something_here(){cout << "printing Derived class member function with type"
		       	<< base<T>::foo << endl;}
		virtual T add(T a){ foo+= 2*a; return foo; }
};

int main(){
//	derived<int> d;
	base<int>* d = new derived<int>;
	d->add(4);
	d->print();
	d + 6;
	d->print();
       /* d.add(4);*/
	//d.print();
	//d + 6;
	/*d.print();	*/
	return 0;	
}
